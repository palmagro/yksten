//Variable para activar las propiedades del modo testing
var testing = true;

//Variables para el batch
var nodosPorAdd = []
var peticionesNodos = []
var peticionesRels = []
var diccionario_nodos = {}



//Funcion que crea un nodo, parametros: 
crea_nodo = function(objeto)
{
  if(objeto.hasOwnProperty("x"))
  {
	delete objeto["x"];
  }
  if(objeto.hasOwnProperty("y"))
  {
	delete objeto["y"];
  }
  //Si el nodo no tiene los campos extraction_version o node_updated_date, los creamos.
  if(!objeto.extraction_version)
  {
      objeto.extraction_version = extraction_version; 
  }
  if(!objeto.node_updated_date)
  {
      objeto.node_updated_date = current_date();
  }
  if(!objeto.extraction_version)
  {
      objeto.extraction_version = extraction_version; 
  }
  //Si la peticion de creacion del nodo fue ya incluida en el batch anteriormente no la volvemos a incluir. 
  if(nodosPorAdd.indexOf(objeto.id) == -1)
  {
    console.log(objeto);
	peticionesNodos.push(objeto);
	nodosPorAdd.push(objeto.id);
  }
}

//Funcion que crea una relación
crea_rel = function(origen,objetoRel)
{
    //Si no tiene tipo suponemos que es de tipo usuario
	if(!origen.hasOwnProperty('type'))
	{  
		origen.type = "user";
	}
    //Si es de tipo usuario y no se especifica lo contrario el usuario es de tipo "R" relacionado
    /*
	if(origen.type=="user" && !origen.hasOwnProperty('user_type'))
	{  
		origen.user_type = "R";
	}
    Aquí se lía...
    */
	crea_nodo(origen);
	objetoRel.from = origen;
	peticionesRels.push(objetoRel);
}

//Función que envia los batches con las peticiones de creacion de nodos
send_nodes = function()
{
    //console.log("Enviando nodos..."); 

	dataNodes = []
	diccionarioNodos = {}

	for (var c in peticionesNodos)
	{
        console.log(peticionesNodos[c].type);
		if(peticionesNodos[c].id)
		{
			dataNodes.push
			({
				method:"POST",
				to:"/cypher",
				body:
				{
					query: "MERGE (n:"+peticionesNodos[c].type+" {id:{value_id}}) ON MATCH SET n = {values} ON CREATE SET n = {values} RETURN n",
					params: 
					{
						value_id: peticionesNodos[c].id,
						values: peticionesNodos[c],
						type: peticionesNodos[c].type
					}				
				}
			});
		}
	}
	 //window.location.replace("http://stackoverflow.com");enviar_batch(JSON.stringify(dataNodes));
    console.log(dataNodes);
	$.ajax({
       async: true, 
       type: "POST",
       url: "/send",
       data: JSON.stringify(dataNodes),
       dataType: "json",
       contentType: "application/json",
       success: actualiza_diccionario,
       error: function( xhr ) {
           window.console && console.log( xhr );
		   actualiza_diccionario();
       },
       complete: function(data) {
       }
   });

}

//Función que envia los batches conlas peticiones de creacion de relaciones
send_rels = function()
{
    //console.log("Enviando relaciones..."); 

	dataRels = []
	for (var c in peticionesRels)
	{
		if(peticionesRels[c].from.id && peticionesRels[c].to.id)
		{
			dataRels.push
			({
				method:"POST",
				to:"/cypher",
				body: 
				{
					query:"MATCH (n:"+peticionesRels[c].from.type+" {id:{id1}}),(m:"+peticionesRels[c].to.type+" {id:{id2}}) MERGE (n)-[r:"+peticionesRels[c].type+" { extraction_version :" + peticionesRels[c].extraction_version + ", relation_updated_date:'"+ peticionesRels[c].relation_updated_date + "' } ]->(m)",
					params:
					{
						id1:peticionesRels[c].from.id,
						id2:peticionesRels[c].to.id
					}
				}
			});
		}
	}
	
	//Convertimos los objetos to y from de facebook a las urls de los nodos correspondientes en neo4j haciendo uso del diccionario
	//YA NO NOS HACE FALTA EL DICCIONARIOPORQUEESTAMOS REFERENCIANDO LOSNODOS CON CYPHER MEDIANTE SU ID DE FB!!!PERO O GUARDAMOS PORQUEQUIZAS NOS INTERESE DESPUES PARA OPTIMIZAR CON LOS INDICES!!
/*	var temp;
	for (var d in dataRels)
	{
		urlDestino = diccionario_nodos[dataRels[d].body.to.id];
		urlOrigen = diccionario_nodos[dataRels[d].body.from.id];
		dataRels[d].body.to = urlDestino;
		dataRels[d].to = urlOrigen+"/relationships";
	}
	*/
	$.ajax({
       async: true, 
       type: "POST",
       url: "/send",
       data: JSON.stringify(dataRels),
       dataType: "json",
       contentType: "application/json",
       success: limpia_batches,
       error: function( xhr ) {
           window.console && console.log( xhr );
		   limpia_batches();
       },
       complete: function(data) {
       }
   });

}

//Función que actualiza el diccionario con {id de fb: id de neo4j}
actualiza_diccionario = function(data)
{
    
	//Ahora no estamos usando el diccionario, por lo quenohace falta actualizarlo
	/*console.log("Actualizando diccionario..."); 

	for (var c in data)
	{
		diccionario_nodos[data[c].body.data[0][0].data.id] = data[c].body.data[0][0].self;
	}
	*/
	//Reseteamos peticionesNodos y nodosPorAdd
	peticionesNodos = [];
	nodosPorAdd = [];
	send_rels();
}

//Función que limpia las estructuras temporales necesarias para los batchs y vuelve a llamar a la función trataAmigos
limpia_batches = function(data)
{
    //console.log("Limpiando batches..."); 

	//Reseteamos peticionesNodos, nodosPorAdd y peticionesRels y pasamos al siguiente amigo
	peticionesNodos = [];
	peticionesRels = [];
	nodosPorAdd = [];
    cont_general++;
    trataAmigos();
}

function base64_encode(data) {
  //  discuss at: http://phpjs.org/functions/base64_encode/
  // original by: Tyler Akins (http://rumkin.com)
  // improved by: Bayron Guevara
  // improved by: Thunder.m
  // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
  // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
  // improved by: Rafał Kukawski (http://kukawski.pl)
  // bugfixed by: Pellentesque Malesuada
  //   example 1: base64_encode('Kevin van Zonneveld');
  //   returns 1: 'S2V2aW4gdmFuIFpvbm5ldmVsZA=='
  //   example 2: base64_encode('a');
  //   returns 2: 'YQ=='

  var b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
  var o1, o2, o3, h1, h2, h3, h4, bits, i = 0,
    ac = 0,
    enc = '',
    tmp_arr = [];

  if (!data) {
    return data;
  }

  do { // pack three octets into four hexets
    o1 = data.charCodeAt(i++);
    o2 = data.charCodeAt(i++);
    o3 = data.charCodeAt(i++);

    bits = o1 << 16 | o2 << 8 | o3;

    h1 = bits >> 18 & 0x3f;
    h2 = bits >> 12 & 0x3f;
    h3 = bits >> 6 & 0x3f;
    h4 = bits & 0x3f;

    // use hexets to index into b64, and append result to encoded string
    tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);
  } while (i < data.length);

  enc = tmp_arr.join('');

  var r = data.length % 3;

  return (r ? enc.slice(0, r - 3) : enc) + '==='.slice(r || 3);
}

